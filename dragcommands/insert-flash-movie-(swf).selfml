(name [Insert Flash Movie (Swf)])

(only-in text.html)

(output snippet)

(file-extensions swf)

(save nothing)

(script [#!/usr/bin/ruby

require "zlib"

# Test for broken pack/unpack
if [1].pack('n') == "\001\000"
  class String
    alias_method :broken_unpack, :unpack
    def unpack(spec)
      broken_unpack(spec.tr("nNvV","vVnN"))
    end
  end
  class Array
    alias_method :broken_pack, :pack
    def pack(spec)
      broken_pack(spec.tr("nNvV","vVnN"))
    end
  end
end

class Swf
  @bits
  @width
  @height
  @version
  @bgcolor
  @buffer
  
  
  attr_reader :width
  attr_reader :height
  attr_reader :version
  attr_reader :bgcolor
  
  def initialize(f)
    @bits = ""
    @buffer = File.new(f,"r").read
    is_zip = ("" << @buffer.slice(0)) == "C"
    @version = @buffer.slice(3).to_i
    
    @buffer.slice!(0..7)
    
    if is_zip
      @buffer = Zlib::Inflate.inflate(@buffer)
    end
    
    nbits = getBits(5)
    xmin = getBits(nbits)
    xmax = getBits(nbits)
    ymin = getBits(nbits)
    ymax = getBits(nbits)
    
    @width = (xmax - xmin) / 20
    @height = (ymax - ymin) / 20
    
    @buffer.slice!(0..3)
    
    @bits = ""
    
    while(true)
      tag = getNextTag()
      if(tag[:id] == 9)
        @bgcolor = sprintf("#%02X%02X%02X", tag[:data][0], tag[:data][1], tag[:data][2])
        break
      end
    end
    
  end
  
private

  def getNextTag()
    tag_and_size = @buffer.slice!(0..1).unpack("v")[0]
    tag = {}
    tag[:id] = tag_and_size >> 6
    tag[:length] = tag_and_size & 0x3f
    if(tag[:length] == 63)
      tag[:length] = @buffer.slice!(0..3).unpack("V")[0]
    end
    
    tag[:data] = @buffer.slice!(0...tag[:length])
    return tag
  end
  
  def getBits(n)
    bytes = (n / 8.0).ceil
    (0...bytes).each {
      @bits << sprintf("%08b", @buffer.slice!(0))
    }
    out = @bits[0...n].to_i(2);
    @bits = @bits[n..-1]
    return out
  end
  
end

file = ENV["TM_DROPPED_FILE"] || "test.swf"
name = file.match(/([^\/]+)\.swf$/)[1]
swf = Swf.new(file)

if (ENV["TM_MODIFIER_FLAGS"] == "OPTION")
print <<HTML
$1<div id="${10:#{name}}"></div>
<script type="text/javascript" charset="utf-8">
    var so = new SWFObject("#{file}", "${20:#{name}_swf}", "#{swf.width}", "#{swf.height}", "#{swf.version}", "#{swf.bgcolor}");
    so.write("$10");
</script>
HTML
else
xhtml = ENV['TM_XHTML']
print <<HTML
<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=#{swf.version},0,0,0" width="#{swf.width}" height="#{swf.height}" id="#{name}" align="middle">
<param name="allowScriptAccess" value="sameDomain"#{xhtml}>
<param name="movie" value="#{file}"#{xhtml}>
<param name="quality" value="high"#{xhtml}>
<param name="bgcolor" value="#{swf.bgcolor}"#{xhtml}>
<embed src="#{file}" quality="high" bgcolor="#{swf.bgcolor}" width="#{swf.width}" height="#{swf.height}" name="#{name}" align="middle" allowScriptAccess="sameDomain" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"#{xhtml}>
</object>
HTML
end])